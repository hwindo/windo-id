# This file should ensure the existence of records required to run the application in every environment (production,
# development, test). The code here should be idempotent so that it can be executed at any point in every environment.
# The data can then be loaded with the bin/rails db:seed command (or created alongside the database with db:setup).
#
# Example:
#
#   ["Action", "Comedy", "Drama", "Horror"].each do |genre_name|
#     MovieGenre.find_or_create_by!(name: genre_name)
#   end

user = User.find_or_create_by!(email_address: "herwindo.artono@gmail.com") do |u|
  u.password = "qweasd"
  u.password_confirmation = "qweasd"
end

Post.create!(
  [
    {
      title: "Getting Started with Ruby on Rails",
      content: "<div><h2>Welcome to Rails Development</h2><p>Ruby on Rails is a web application framework that includes everything needed to create database-backed web applications according to the Model-View-Controller (MVC) pattern.</p><p>Rails emphasizes the use of well-known software engineering patterns and paradigms, including convention over configuration (CoC), don't repeat yourself (DRY), and the active record pattern.</p></div>",
      status: :published,
      user: user
    },
    {
      title: "Mastering ActionText in Rails 7",
      content: "<div><h2>Rich Text Editing Made Simple</h2><p>ActionText brings rich text content and editing to Rails. It includes the Trix editor that handles everything from formatting to links to quotes to lists to embedded images and galleries.</p><p>The rich text content generated by the Trix editor is saved in its own RichText model that's associated with any existing Active Record model in the application.</p></div>",
      status: :published,
      user: user
    },
    {
      title: "Effective Database Design Patterns",
      content: "<div><h2>Building Scalable Applications</h2><p>Good database design is crucial for application performance and maintainability. This post explores normalization, indexing strategies, and when to consider NoSQL alternatives.</p><p>We'll also cover how Rails makes it easy to implement complex relationships between your models while maintaining clean, readable code.</p></div>",
      status: :published,
      user: user
    }
  ]
)
